
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000971  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000751  00000000  00000000  00000b79  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000422  00000000  00000000  000012ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000134  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003fb  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000549  00000000  00000000  00001c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <UART_INIT>:

void UART_INIT(void)
{
	// USART Control and Status Register 0 A
	//  8비트 UCSR0A(7:RXC0, 6:TXC0, 5:UDRE0, 4:FE0, 3:DOR0, 2:UPE0, 1:U2X0, 0:MPCM0)
	UCSR0A |= _BV(U2X0);							// 2배속 - 1배속일 경우 0x00
  80:	e0 ec       	ldi	r30, 0xC0	; 192
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	82 60       	ori	r24, 0x02	; 2
  88:	80 83       	st	Z, r24
	
	// USART Baud Rate Register
	//  4비트 비어있음
	// 12비트 UBRR0H[11:8], UBRR0L[7:0] - 전송 속도(보율)
	UBRR0H = 0x00;									// 통신 속도(보율) 설정
  8a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = 207;									// 표 10-6 비동기 2배속 참조
  8e:	8f ec       	ldi	r24, 0xCF	; 207
  90:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	
	// USART Control and Status Register 0 C
	//  8비트 UCSR0C(7:UMSEL01, 6:UMSEL00, 5:UPM01, 4:UPM00, 3:USBS0, 2:UCSZ01, 1:UCSZ00, 0:UCPOL0)
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);			// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
  94:	86 e0       	ldi	r24, 0x06	; 6
  96:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// USART Control and Status Register 0 B
	//  8비트 UCSR0B(7:RXCIE0, 6:TXCIE0, 5:UDRIE0, 4:RXEN0, 3:TXEN0, 2:UCSZ02, 1:RXB81, 0:TXB80)
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);				// RXEN0(수신), TXEN0(송신)
  9a:	88 e1       	ldi	r24, 0x18	; 24
  9c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  a0:	08 95       	ret

000000a2 <UART_receive>:
}

unsigned char UART_receive(void)				    // 1바이트 수신
{
	while( !(UCSR0A & (1<<RXC0)) );					// 데이터 수신 대기
  a2:	e0 ec       	ldi	r30, 0xC0	; 192
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	88 23       	and	r24, r24
  aa:	ec f7       	brge	.-6      	; 0xa6 <UART_receive+0x4>
	
	// USART Data Register
	//  8비트 RXB[7:0]
	//  8비트 TXB[7:0]
	return UDR0;									// 데이터 수신
  ac:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
  b0:	08 95       	ret

000000b2 <UART_transmit>:

void UART_transmit(unsigned char data)				// 1바이트 송신
{
	while( !(UCSR0A & (1<<UDRE0)) );				// 데이터 송신 대기
  b2:	e0 ec       	ldi	r30, 0xC0	; 192
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	90 81       	ld	r25, Z
  b8:	95 ff       	sbrs	r25, 5
  ba:	fd cf       	rjmp	.-6      	; 0xb6 <UART_transmit+0x4>
	UDR0 = data;									// 데이터 송신
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  c0:	08 95       	ret

000000c2 <main>:

int main(int argc, char *argv[])
{
	unsigned char data;
	
	UART_INIT();
  c2:	0e 94 40 00 	call	0x80	; 0x80 <UART_INIT>
	while (1)
	{
		data = UART_receive();
  c6:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_receive>
		UART_transmit(data);
  ca:	0e 94 59 00 	call	0xb2	; 0xb2 <UART_transmit>
  ce:	fb cf       	rjmp	.-10     	; 0xc6 <main+0x4>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
