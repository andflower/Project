
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000011c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b40  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000086d  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000684  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f8  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000047c  00000000  00000000  00001e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a0  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 4e 00 	call	0x9c	; 0x9c <main>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <I2C_INIT>:

void I2C_INIT(void)
{
	// The Port C Data Direction Register
	//  8비트 DDRC(7:DDC6, 6:DDC5, 5:DDC4, 4:DDC3, 3:DDC3, 2:DDC2, 1:DDC1, 0:DDC0)
	DDRC |= _BV(I2C_SCL);
  80:	3d 9a       	sbi	0x07, 5	; 7
	DDRC |= _BV(I2C_SDA);
  82:	3c 9a       	sbi	0x07, 4	; 7
	
	// TWI Bit Rate Register
	//  8비트 TWBR[7:0]
	TWBR = (uint64_t)( F_CPU / (2 * 100000) ) - 8;					// P.316 참조, 분주비 1, 100KHz
  84:	88 e4       	ldi	r24, 0x48	; 72
  86:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
	
	//TWI Control Register
	//  8비트 TWCR(7:TWINT, 6:TWEA, 5:TWSTA, 4:TWSTO, 3:TWWC, 2:TWEN, 1:예약됨, 0:TWIE)
	TWCR = _BV(TWEN) | _BV(TWEA);									//I2C 활성화(TWEN), ACK 허용(TWEA)
  8a:	84 e4       	ldi	r24, 0x44	; 68
  8c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
  90:	08 95       	ret

00000092 <setup>:
	I2C_INIT();
	UART_INIT();
}

void loop()
{
  92:	0e 94 40 00 	call	0x80	; 0x80 <I2C_INIT>
  96:	0e 94 51 00 	call	0xa2	; 0xa2 <UART_INIT>
  9a:	08 95       	ret

0000009c <main>:
	
}

int main(void)
{
	setup();
  9c:	0e 94 49 00 	call	0x92	; 0x92 <setup>
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <main+0x4>

000000a2 <UART_INIT>:

void UART_INIT(void)
{
	// USART Control and Status Register 0 A
	//  8비트 UCSR0A(7:RXC0, 6:TXC0, 5:UDRE0, 4:FE0, 3:DOR0, 2:UPE0, 1:U2X0, 0:MPCM0)
	UCSR0A |= _BV(U2X0);									// 2배속 - 1배속일 경우 0x00
  a2:	e0 ec       	ldi	r30, 0xC0	; 192
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	80 83       	st	Z, r24
	
	// USART Baud Rate Register
	//  4비트 비어있음
	// 12비트 UBRR0H[11:8], UBRR0L[7:0] - 전송 속도(보율)
	UBRR0H = 0x00;											// 통신 속도(보율) 설정
  ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (uint64_t)(((F_CPU/(8*115200))-1) + 0.5);			// 표 10-6 비동기 2배속 참조 baud(9600)
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>

	
	// USART Control and Status Register 0 C
	//  8비트 UCSR0C(7:UMSEL01, 6:UMSEL00, 5:UPM01, 4:UPM00, 3:USBS0, 2:UCSZ01, 1:UCSZ00, 0:UCPOL0)
	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);						// 비동기, 8비트 데이터, 패리티 없음, 1비트 정지 비트 모드
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	
	// USART Control and Status Register 0 B
	//  8비트 UCSR0B(7:RXCIE0, 6:TXCIE0, 5:UDRIE0, 4:RXEN0, 3:TXEN0, 2:UCSZ02, 1:RXB81, 0:TXB80)
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);						// RXEN0(수신), TXEN0(송신)
  bc:	88 e1       	ldi	r24, 0x18	; 24
  be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  c2:	08 95       	ret

000000c4 <_exit>:
  c4:	f8 94       	cli

000000c6 <__stop_program>:
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <__stop_program>
